#include "ros/ros.h"
#include <sensor_msgs/JointState.h>
#include <std_msgs/Header.h>

int pozisyon = 0;
int ang=0;
double encoder_resolution=200;


char a[] = {"base_tilt_joint"}; // F: Front - B: Back - R: Right - L: Left

double pos[]={0.0}; /// stores arduino time
double vel[]={0.0};
double eff[]={0.0};
    sensor_msgs::JointState robot_state;
double degreTOrad(double degre);

int main(int argc, char **argv)
{

  ros::init(argc, argv, "joint_state_publisher");

  ros::NodeHandle n;
  
  std_msgs::Header header;


  ros::Publisher chatter_pub = n.advertise<sensor_msgs::JointState>("joint_states", 100);

  ros::Rate loop_rate(30);



  robot_state.header;
         robot_state.header.stamp=ros::Time::now();
  robot_state.name.resize(1);
  robot_state.velocity.resize(1);
  robot_state.position.resize(1); /// here used for arduino time
  robot_state.effort.resize(1); /// here used for arduino time

    robot_state.name[0]=(a);
    pos[0]=degreTOrad(pozisyon);
	


    robot_state.position[0] = pos[0];
    robot_state.velocity[0] = vel[0];
    robot_state.effort[0] = eff[0];
  while (ros::ok())
  {


   ang=((pozisyon/encoder_resolution)*360.0);  // calculate angel according to pulse count
   ang=int(ang)%360;
   
   
    pos[0]=degreTOrad(ang);
    robot_state.header.stamp=ros::Time::now();
 robot_state.position[0] = pos[0];
    robot_state.velocity[0] = 0;
    robot_state.effort[0] = 0;
   pozisyon++;
   if(pozisyon==8400){pozisyon=0;}

    //ROS_INFO("%s", msg.data.c_str());
    
    chatter_pub.publish(robot_state);

    ros::spinOnce();

    loop_rate.sleep();

  }


  return 0;
}

double degreTOrad(double degre){
  
  
  return (degre/57.2958);
  
  }
